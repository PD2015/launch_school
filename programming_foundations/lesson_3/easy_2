Q1)
In this hash of people and their age,

ages = { "Herman" => 32, "Lily" => 30, "Grandpa" => 402, "Eddie" => 10 }
see if there is an age present for "Spot".

****************
ages[:spot]
ages.has_key?("Spot")
ages.include?("Spot")
*******************

official:
ages.key?("Spot")
ages.member?("Spot?")

========================================
Q2)
Add up all of the ages from our current Munster family hash:

ages = { "Herman" => 32, "Lily" => 30, "Grandpa" => 5843, "Eddie" => 10, "Marilyn" => 22, "Spot" => 237 }

****************
age_collection = ages.map do |_, value|
value
end

total = age_collection.inject(0) do |sum, n|
sum + n
end
****************

official:
ages.values.inject(:+)
ages.values returns a new array of values.
inject(:+). should ideally be inject(0, :+) to give the starting value of 0. If an empty array it will return nil otherwise.

=================================================
Q3)
In the age hash:

ages = { "Herman" => 32, "Lily" => 30, "Grandpa" => 402, "Eddie" => 10 }
throw out the really old people (age 100 or older).

****************
ages.delete_if? do |key, value|
value > 100
end
****************

official:
ages.keep_if { |name, age| age < 100 }

==================================================
Q4)

Starting with this string:

munsters_description = "The Munsters are creepy in a good way."
Convert the string in the following ways (code will be executed on original munsters_description above):

"The munsters are creepy in a good way."
"tHE mUNSTERS ARE CREEPY IN A GOOD WAY."
"the munsters are creepy in a good way."
"THE MUNSTERS ARE CREEPY IN A GOOD WAY."

****************
munsters_description.capitalize
munsters_description.swapcase
munsters_description.downcase
munsters_description.upcase
****************

munsters_description.upcase!.gsub(/[TM]/, 'T' => 't', 'M' => 'm')

=====================================================
Q5)
We have most of the Munster family in our age hash:

ages = { "Herman" => 32, "Lily" => 30, "Grandpa" => 5843, "Eddie" => 10 }
add ages for Marilyn and Spot to the existing hash

additional_ages = { "Marilyn" => 22, "Spot" => 237 }

****************
additional_ages.each do |key, value|
  ages[key] = value
end
****************

official:
ages.merge!(additional_ages)

====================
Q6)
Pick out the minimum age from our current Munster family hash:

ages = { "Herman" => 32, "Lily" => 30, "Grandpa" => 5843, "Eddie" => 10, "Marilyn" => 22, "Spot" => 237 }

****************
ages.min_by {|key, value| value}
returns ["Eddie", 10]
****************

official:
ages.values.min
returns 10

==============================================================
Q7)
See if the name "Dino" appears in the string below:

advice = "Few things in life are as important as house training your pet dinosaur."

****************
advice.include?("Dino") => false
advice.include?("dino") => true
****************

official:
advice.match("Dino")

==============================================================
Q8)
In the array:

flintstones = %w(Fred Barney Wilma Betty BamBam Pebbles)
Find the index of the first name that starts with "Be"

****************
flintstones.select.each_with_index do |name, index|
  if name.start_with?("Be")
  puts index
  end
end
****************

official:
flintstones.index { |name| name[0, 2] == "Be" }

=======================================================
Q9)

Using array#map!, shorten each of these names to just 3 characters:

flintstones = %w(Fred Barney Wilma Betty BamBam Pebbles)

****************
flintstones.map! do |name|
 name[0, 3]
end
****************


==========================================================
Q10)
Question 10

Again, shorten each of these names to just 3 characters -- but this time do it all on one line:

flintstones = %w(Fred Barney Wilma Betty BamBam Pebbles)

****************
flintstones.map! {|name| name[0, 3]}
****************


