Q1)

Let's do some "ASCII Art" (a stone-age form of nerd artwork from back in the days before computers had video screens).

For this exercise, write a one-line program that creates the following output 10 times, with the subsequent line indented 1 space to the right:

The Flintstones Rock!
 The Flintstones Rock!
  The Flintstones Rock!


  **********************
  10.times {|n| puts (" " * n) + "The Flintstones Rock!"}
    **********************

=============================================================
Q2)
Create a hash that expresses the frequency with which each letter occurs in this string:

statement = "The Flintstones Rock"
ex:

{ "F"=>1, "R"=>1, "T"=>1, "c"=>1, "e"=>2, ... }

**********************

statement.count("a".."z")

statement.each do |l|
  l.count("l")
end

statement.split("").count {|l| l == ("a".."z")}

result ={}
letters = ('A'..'Z').to_a + ('a'..'z').to_a 
sarray = statement.split("")
all wrong.
***

Official:
result = {}
letters = ('A'..'Z').to_a + ('a'..'z').to_a
letters.each do |letter|
  letter_frequency = statement.scan(letter).count
  result[letter] = letter_frequency if letter_frequency > 0
end

=============================================================
Q3)

The result of the following statement will be an error:

puts "the value of 40 + 2 is " + (40 + 2)
Why is this and what are two possible ways to fix this?

**********************
You can't add a fixnum and a string together or concatenate them.

1) puts "the value of 40 + 2 is " + (40 + 2).to_s
2) puts "the value of 40 + 2 is #{40 + 2}"
**********************
==============================================================
Q4)
What happens when we modify an array while we are iterating over it? What would be output by this code?

numbers = [1, 2, 3, 4]
numbers.each do |number|
  p number
  numbers.shift(1)
end
----
**********************

1
3
=> [3,4] This is what is left in the orginal array.
Shift removes 1 item. Shift in itself removes that item from the front of the array.
The iteration continues based on the position it needs to iterate through no matter what has happened to the elements or the change in the indexing. It will go to position 3 on the third iteration.
**********************

What would be output by this code?

numbers = [1, 2, 3, 4]
numbers.each do |number|
  p number
  numbers.pop(1)
end

**********************
1
2
=> [1,2] This is what is left in the orginal array.
pop(1) removes 1 from the end of the array.
**********************

==========================================================
Q5)
Alan wrote the following method, which was intended to show all of the factors of the input number:

def factors(number)
  dividend = number
  divisors = []
  begin
    divisors << number / dividend if number % dividend == 0
    dividend -= 1
  end until dividend == 0
  divisors
end
Alyssa noticed that this will fail if you call this with an input of 0 or a negative number and asked Alan to change the loop. How can you change the loop construct (instead of using begin/end/until) to make this work? Note that we're not looking to find the factors for 0 or negative numbers, but we just want to handle it gracefully instead of raising an exception or going into an infinite loop.

Bonus 1

What is the purpose of the number % dividend == 0 ?

Bonus 2

What is the purpose of the second-to-last line in the method (the divisors before the method's end)?


**********************

def factors(number)
loop do
  if number <= 0
    puts "This isn't a valid number"
      break
  else
    dividend = number
    divisors = []
    begin
      divisors << number / dividend if number % dividend == 0
      dividend -= 1
    end until dividend == 0
    divisors
    end
  end
end 

Bonus 1: to check if each number goes into the chosen number cleanly, ie with no remainder. 

Bonus 2: To return the final array. If this wasn't here the the return of the method would be nil. 
**********************

official:

while dividend > 0 do
  divisors << number / dividend if number % dividend == 0
  dividend -= 1
end

==============================================================

Q6)
  Alyssa was asked to write an implementation of a rolling buffer. Elements are added to the rolling buffer and if the buffer becomes full, then new elements that are added will displace the oldest elements in the buffer.

She wrote two implementations saying, "Take your pick. Do you like << or + for modifying the buffer?". Is there a difference between the two, other than what operator she chose to use to add an element to the buffer?

def rolling_buffer1(buffer, max_buffer_size, new_element)
  buffer << new_element
  buffer.shift if buffer.size >= max_buffer_size
  buffer
end

def rolling_buffer2(input_array, max_buffer_size, new_element)
  buffer = input_array + [new_element]
  buffer.shift if buffer.size >= max_buffer_size
  buffer
end

**********************
Although in both cases the method adds a new element to the buffer array. The method << mutates the caller whilst + does not. Therefore the + method in this instance would be pointless.
**********************

official:
Yes, there is a difference. While both methods have the same return value, in the first implementation, the input argument called buffer will be modified and will end up being changed after rolling_buffer1 returns. That is, the caller will have the input array that they pass in be different once the call returns. In the other implementation, rolling_buffer2 will not alter the caller's input argument.

==============================================================

Q7)
Alyssa asked Ben to write up a basic implementation of a Fibonacci calculator, A user passes in two numbers, and the calculator will keep computing the sequence until some limit is reached.

Ben coded up this implementation but complained that as soon as he ran it, he got an error. Something about the limit variable. What's wrong with the code?

limit = 15

def fib(first_num, second_num)
  while second_num < limit
    sum = first_num + second_num
    first_num = second_num
    second_num = sum
  end
  sum
end

result = fib(0, 1)
puts "result is #{result}"
How would you fix this so that it works?

**********************
limit is a variable set in the main:object. Methods only have access to local variables defined within them. To make limit accessable it either needs to be re-difnied within the method or passed in as an argument.

limit = 15

def fib(first_num, second_num, limit)
  while second_num < limit
    sum = first_num + second_num
    first_num = second_num
    second_num = sum
  end
  sum
end

**********************

==============================================================
Q8)
In another example we used some built-in string methods to change the case of a string. A notably missing method is something provided in Rails, but not in Ruby itself...titleize! This method in Ruby on Rails creates a string that has each word capitalized as it would be in a title.

Write your own version of the rails titleize implementation.

**********************
def titleize(string)
  a1 = string.split(" ")
  a2 = a1.map! { |word| word.capitalize }.join(' ')
end

can be refactored again too

def titleize(string)
string.split.map { |word| word.capitalize }.join(' ')
end

**********************

official:
words.split.map { |word| word.capitalize }.join(' ')

==============================================================

Q9)

Given the munsters hash below

munsters = {
  "Herman" => { "age" => 32, "gender" => "male" },
  "Lily" => { "age" => 30, "gender" => "female" },
  "Grandpa" => { "age" => 402, "gender" => "male" },
  "Eddie" => { "age" => 10, "gender" => "male" },
  "Marilyn" => { "age" => 23, "gender" => "female"}
}
Modify the hash such that each member of the Munster family has an additional "age_group" key that has one of three values describing the age group the family member is in (kid, adult, or senior). Your solution should produce the hash below

{ "Herman" => { "age" => 32, "gender" => "male", "age_group" => "adult" },
  "Lily" => {"age" => 30, "gender" => "female", "age_group" => "adult" },
  "Grandpa" => { "age" => 402, "gender" => "male", "age_group" => "senior" },
  "Eddie" => { "age" => 10, "gender" => "male", "age_group" => "kid" },
  "Marilyn" => { "age" => 23, "gender" => "female", "age_group" => "adult" } }
Note: a kid is in the age range 0 - 17, an adult is in the range 18 - 64 and a senior is aged 65+.

hint: try using a case statement along with Ruby Range objects in your solution

**********************
munsters.each do |name, details|

  case details["age"]
  when 0..17
    details[:age_group] = "kid"
  when 18..64
    details[:age_group] = "adult"
  else 
    details[:age_group] = "senior"
  end
  
end

**********************









